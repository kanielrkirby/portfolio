---
export interface Props {
  name: string;
  class?: string;
}
const { name, class: className = "" } = Astro.props;
---

<modal-component
  class="modal flex fixed left-0 top-0 z-50 h-full w-full max-h-[100vh] items-center justify-center bg-black bg-opacity-50 backdrop-blur transition-opacity duration-500 selection:bg-red-300"
  id={`${name}-modal`}
  aria-hidden="true"
  tabindex="-1"
  data-name={name}
>
  <div class="absolute left-0 top-0 z-40 h-full w-full" data-micromodal-close>
  </div>
  <div
    class="z-50 flex h-fit w-[40rem] max-w-[95%] flex-col items-center max-h-[100vh] rounded-md bg-white p-8 transition-all duration-300 descends-[.modal:not(.is-open)]:translate-y-16"
    role="dialog"
    aria-modal="true"
    aria-labelledby={`${name}-modal-title`}
  >
    <header class="relative flex w-full justify-center">
      <button
        class="link-black link-bg-black link absolute right-0 top-0 hover:link-red-500"
        aria-label="Close modal"
        data-micromodal-close
      >
        Close
      </button>
      <h1 id={`${name}-modal-title`} class="mt-8 capitalize">{name}</h1>
    </header>
    <div
      class={`my-16 flex w-full flex-col gap-4 overflow-y-scroll ${className}`}
      id={`${name}-modal-content`}
    >
      <slot />
    </div>
  </div>
</modal-component>

<script>
  import { initModal } from "@/scripts/modal";
  export class Modal extends HTMLElement {
    constructor() {
      super();
      const name = this.getAttribute("data-name");
      initModal(this, `${name}-modal-btn`, `${name}-modal`);
    }
  }
  customElements.define("modal-component", Modal);
</script>
